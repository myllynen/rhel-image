---
- name: Remove earlier image blueprint repo clone
  ansible.builtin.file:
    path: "{{ rhel_image_local_repo_path }}"
    state: absent

- name: Clone image blueprint repo
  ansible.builtin.git:
    repo: "{{ rhel_image_git_remote_repo }}"
    dest: "{{ rhel_image_local_repo_path }}"
    version: "{{ rhel_image_git_repo_checkout }}"
    key_file: "{{ rhel_image_git_key_file | default(omit) }}"
    accept_newhostkey: true

- name: Push image blueprint to osbuilder
  ansible.builtin.command:
    cmd: composer-cli blueprints push {{ rhel_image_blueprint }}.toml
    chdir: "{{ rhel_image_local_repo_path }}"
  changed_when: true

- name: Verify image blueprint
  ansible.builtin.command: composer-cli blueprints depsolve {{ rhel_image_blueprint }}
  changed_when: true

- name: Start image build
  vars:
    ostree_ref: "{{ rhel_image_ostree_ref | default(false) }}"
    ref_option: "{{ ostree_ref | ternary('--ref ' + ostree_ref | string, '') }}"
    ostree_parent: "{{ rhel_image_ostree_parent | default(false) }}"
    parent_option: "{{ ostree_parent | ternary('--parent ' + ostree_parent | string, '') }}"
    ostree_url: "{{ rhel_image_ostree_url | default(false) }}"
    url_option: "{{ ostree_url | ternary('--url ' + ostree_url | string, '') }}"
    size_mb: "{{ rhel_image_size | default(false) }}"
    size_option: "{{ size_mb | ternary('--size ' + size_mb | string, '') }}"
    start_cmd: "{{ 'start-ostree' if ostree_ref else 'start' }}"
  ansible.builtin.command: >
    composer-cli compose {{ start_cmd }} {{ ref_option }} {{ parent_option }} {{ url_option }} {{ size_option }}
    {{ rhel_image_blueprint }} {{ rhel_image_output_type }}
  register: build_command
  changed_when: true

- name: Record build UUID
  ansible.builtin.set_fact:
    build_uuid: "{{ (build_command.stdout_lines | select('search', '^Compose ') | first).split()[1] }}"

- name: Wait for image build to complete
  ansible.builtin.command: composer-cli compose info {{ build_uuid }}
  register: build_status
  failed_when: "'not a valid build' in build_status.stderr or 'FAILED' in build_status.stdout"
  changed_when: false
  ignore_errors: true
  until: "'not a valid build' in build_status.stderr or 'FAILED' in build_status.stdout or 'FINISHED' in build_status.stdout"
  retries: 30
  delay: 30

- name: Display failed build logs
  ansible.builtin.include_tasks: build_logs_display.yml
  when: "'not a valid build' in build_status.stderr or 'FAILED' in build_status.stdout"

- name: Fail if build not successful
  ansible.builtin.fail:
    msg: "Build failed."
  when: "'not a valid build' in build_status.stderr or 'FAILED' in build_status.stdout"

- name: Create image download directory
  ansible.builtin.file:
    state: directory
    # noqa: risky-file-permissions
    path: "{{ rhel_image_download_dir }}"

- name: Download image from osbuilder
  vars:
    build_file: "{{ rhel_image_filename if rhel_image_filename else build_uuid }}"
    cmd_params: "{{ '' if build_file == build_uuid else '--filename ' + build_file }}"
  ansible.builtin.command:
    cmd: composer-cli compose image {{ build_uuid }} {{ cmd_params }}
    chdir: "{{ rhel_image_download_dir }}"
  register: image_file
  changed_when: true

- name: Delete image build from osbuilder
  ansible.builtin.command: composer-cli compose delete {{ build_uuid }}
  changed_when: true
  when: rhel_image_build_remove | bool

- name: Remove image blueprint repo clone
  ansible.builtin.file:
    path: "{{ rhel_image_local_repo_path }}"
    state: absent
